// Class automatically generated by Dev-C++ New Class wizard

#include "jclass.h" // class's header file
#include <iostream>
#include <assert.h>
#include <string.h>
#include "toolkit.h"

// class constructor
JClass::JClass()
{
	// insert your code here
	interfaces     = (u2*)0;
	constantPool   = (PCONSTANT*)0;
	fields         = (PFIELDINFO*)0;
	methods        = (PMETHODINFO*)0;
	attributes     = (PATTRIBUTE*)0;
	constantIndex  = 1;
}

// class destructor
JClass::~JClass()
{
	// insert your code here
	if(constantPool){
	   delete[] constantPool;
    }
    if(interfaces) {
        delete[] interfaces;
    }
    if(fields) {
        delete[] fields;
    }
    if(methods) {
        delete[] methods;
    }
    if(attributes) {
        delete[] attributes;
    }
}

//-------------------------------------------------------------------------
// returns the value of magic
u4 JClass::getMagic()
{
	return magic;
}

// sets the value of magic
void JClass::setMagic(u4 x)
{
	magic = x;
}


bool JClass::isValid()
{
    return (magic == Magic);
}

// returns the value of minorVersion
u2 JClass::getMinorVersion()
{
	return minorVersion;
}

// sets the value of minorVersion
void JClass::setMinorVersion(u2 x)
{
	minorVersion = x;
}

// returns the value of majorVersion
u2 JClass::getMajorVersion()
{
	return majorVersion;
}

// sets the value of majorVersion
void JClass::setMajorVersion(u2 x)
{
	majorVersion = x;
}

// returns the value of constPoolCounter
u2 JClass::getConstPoolCount()
{
	return constPoolCount;
}

// sets the value of constPoolCounter
void JClass::setConstPoolCount(u2 x)
{
	constPoolCount = x;
}

// returns the value of accessFlags
u2 JClass::getAccessFlag()
{
	return accessFlags;
}

// sets the value of accessFlags
void JClass::setAccessFlag(u2 x)
{
	accessFlags = x;
}

// returns the value of thisClass
u2 JClass::getThisClass()
{
	return thisClass;
}

// sets the value of thisClass
void JClass::setThisClass(u2 x)
{
	thisClass = x;
}

u2 JClass::getSuperClass()
{
    return superClass;
}

void JClass::setSuperClass(u2 x)
{
    superClass = x;
}


u2 JClass::getInterfaceCount()
{
    return interfacesCount;
}

void JClass::setInterfaceCount(u2 x)
{
    interfacesCount = x;
}

u2 JClass::getFieldsCount()
{
    return fieldsCount;
}

void JClass::setFieldsCount(u2 x)
{
    fieldsCount = x;
}

u2 JClass::getMethodsCount() 
{ 
    return methodsCount;
}

void JClass::setMethodsCount(u2 x) 
{ 
    methodsCount = x;
}

//-------------------------------------------------------

void JClass::initConstantPool(UINT count)
{
    if(constantPool) {
        delete[] constantPool;
    }
    constantPool = new PCONSTANT[count];
    memset(constantPool,0,sizeof(PCONSTANT)*count);
}

void JClass::initInterfaces(u2 count)
{
    if(count < 1)
        return;
        
    if(interfaces) {
        delete[] interfaces;
    }
    interfaces = new u2[count];
    memset(interfaces,0,sizeof(u2)*count);
}

void JClass::initFields(u2 count)
{
    if(fields) {
        delete[] fields;
    }
    fields = new PFIELDINFO[count];
    memset(fields,0,sizeof(PFIELDINFO)*count);
}

void JClass::initMethods(u2 count)
{
    if(methods) {
        delete[] methods;
    }
    methods = new PMETHODINFO[count];
    memset(methods,0,sizeof(PMETHODINFO)*count);
}

void JClass::initAttributes(u2 count)
{
    if(attributes) {
        delete[] attributes;
    }
    attributes = new PATTRIBUTE[count];
    memset(attributes,0,sizeof(PATTRIBUTE)*count);
}

//-------------------------------------------------------

MethodInfo* JClass::getMethod(u2 pos)
{
    assert(pos < methodsCount);
    MethodInfo* ret = NULL;
    if(methods) {
        ret = methods[pos];
    }
    return ret;
}

void JClass::setMethod(MethodInfo*method, u2 pos)
{
    assert(pos < methodsCount);
    if(methods) {
        if(methods[pos]) {
            delete methods[pos];
        }
        methods[pos] = method;
    }
}

u2 JClass::getAttributesCount()
{
    return attributesCount;
}

void JClass::setAttributesCount(u2 _count)
{
    attributesCount = _count;
}

GenericAttribute* JClass::getAttribute(u2 pos)
{
    assert(pos < attributesCount);
    GenericAttribute*ret = NULL;
    if(attributes) {
        ret = attributes[pos];
    }
    return ret;
}

void JClass::setAttribute(GenericAttribute*attribute,u2 pos)
{
    assert(pos < attributesCount);
    if(attributes) {
        if(attributes[pos]) {
            delete attributes[pos];
        }
        attributes[pos] = attribute;
    }
}

FieldInfo*JClass::getField(u2 pos)
{
    assert(pos < fieldsCount);
    FieldInfo* ret = NULL;
    if(fields) {
        ret = fields[pos];
    }
    return ret;
}

void JClass::setField(FieldInfo*field,u2 pos)
{
    assert(pos < fieldsCount);
    if(fields) {
        if(fields[pos]) {
            delete fields[pos];
        }
        fields[pos] = field;
    }
}

Constant* JClass::getConstant(u2 pos)
{
    assert(pos < constPoolCount);
    Constant* ret = NULL;
    if(constantPool) {
        ret = constantPool[pos];
    }
    return ret;
}

void JClass::setConstant(Constant*constant,u2 pos)
{
    assert(pos < constPoolCount);
    if(constantPool) {
        if(constantPool[pos]) {
            delete constantPool[pos];
        }
        constantPool[pos] = constant;
    }    
}

u2 JClass::getInterface(u2 pos)
{
    assert(pos < interfacesCount);
    u2 ret = 0;
    if(interfaces) {
        ret = interfaces[pos];
    }
    return ret;
}

void JClass::setInterface(u2 intf, u2 pos)
{
    assert(pos < interfacesCount);
    if(interfaces) {
        interfaces[pos] = intf;
    }
}

void JClass::addConstant(Constant*_constant_)
{
    assert(_constant_ != NULL);
    setConstant(_constant_,constantIndex);
    constantIndex++;
}

UINT JClass::serialize(JBuffer* buf) {
	/* class file format
		ClassFile {
    			u4 magic;
    			u2 minor_version;
    			u2 major_version;
    			u2 constant_pool_count;
    			cp_info constant_pool[constant_pool_count-1];
    			u2 access_flags;
    			u2 this_class;
    			u2 super_class;
    			u2 interfaces_count;
    			u2 interfaces[interfaces_count];
    			u2 fields_count;
    			field_info fields[fields_count];
    			u2 methods_count;
    			method_info methods[methods_count];
    			u2 attributes_count;
    			attribute_info attributes[attributes_count];
			}
	*/
	UINT pos = 0;
	ToolKit::memSetU4(buf->getBuffer(), getMagic(), buf->getSize(), pos);
	ToolKit::memSetU2(buf->getBuffer(), getMinorVersion(), buf->getSize(), pos);
	ToolKit::memSetU2(buf->getBuffer(), getMajorVersion(), buf->getSize(), pos);

	ToolKit::memSetU2(buf->getBuffer(), getConstPoolCount(), buf->getSize(), pos);
	for(u2 i = 1; i < getConstPoolCount(); i++) {
		if(i == 122) 
			this->getConstant(i)->serialize(buf, pos);
		else 
			this->getConstant(i)->serialize(buf, pos);
	}

	ToolKit::memSetU2(buf->getBuffer(), getAccessFlag(), buf->getSize(), pos);
	ToolKit::memSetU2(buf->getBuffer(), getThisClass(), buf->getSize(), pos);
	ToolKit::memSetU2(buf->getBuffer(), getSuperClass(), buf->getSize(), pos);

	ToolKit::memSetU2(buf->getBuffer(), getInterfaceCount(), buf->getSize(), pos);
	for(u2 i = 0; i < getInterfaceCount(); i++) {
		ToolKit::memSetU2(buf->getBuffer(), getInterface(i), buf->getSize(), pos);
	}

	// Serialize fields
	ToolKit::memSetU2(buf->getBuffer(), getFieldsCount(), buf->getSize(), pos);
	for(u2 i = 0; i < getFieldsCount(); i++) {
		getField(i)->serialize(buf, pos);
	}

	// Serialize methods
	ToolKit::memSetU2(buf->getBuffer(), getMethodsCount(), buf->getSize(), pos);
	for(u2 i = 0; i < getMethodsCount(); i++) {
		getMethod(i)->serialize(buf, pos);
	}
	
	// Serialize attribues
	ToolKit::memSetU2(buf->getBuffer(), getAttributesCount(), buf->getSize(), pos);
	for(u2 i = 0; i < getAttributesCount(); i++) {
		getAttribute(i)->serialize(buf, pos);
	}

	return pos;
}
