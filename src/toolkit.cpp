// Class automatically generated by Dev-C++ New Class wizard

#include "toolkit.h" // class's header file
#include <assert.h>

// class constructor
ToolKit::ToolKit()
{
	// insert your code here
}

// class destructor
ToolKit::~ToolKit()
{
	// insert your code here
}

u1 ToolKit::getLowByte(u2 wordValue) {
  return (u1)wordValue;
}

u1 ToolKit::getHighByte(u2 wordValue) {
  return (u1)(wordValue >> 8);
}


u2 ToolKit::getLowWord(u4 doubleWordValue) {
  return (u2)doubleWordValue;
}

u2 ToolKit::getHighWord(u4 doubleWordValue) {
  return (u2)(doubleWordValue >> 16);
}


/*! Get U1 type value from byte array */
u1 ToolKit::memGetU1(BYTE* array, UINT& pos)
{
    u1 value;
    value = array[pos];
    pos++;
    return value;
}

int ToolKit::memSetU1(BYTE* array, u1 value, UINT size, UINT& pos) {
  int result = -1;

  if((pos + sizeof(u1)) <= size) {
    array[pos] = value;
    pos++;
    result = pos;
  }

  return result;
}

/*! Get U2 type value from byte array */
u2 ToolKit::memGetU2(BYTE* array, UINT& pos)
{
    u2 value;
    value = array[pos];
    pos++;
    value <<= 8;
    value += array[pos];
    pos++;
    return value;
}

int ToolKit::memSetU2(BYTE* array, u2 value, UINT size, UINT& pos) {
  int result = -1;

  if((pos + sizeof(u2)) <= size) {
    u1 high, low;
    high = getHighByte(value);
    low = getLowByte(value);
    array[pos] = high;
    pos++;
    array[pos] = low;
    pos++;
    result = pos;
  }

  return result;
}

/*! Get U4 type value from byte array */
u4 ToolKit::memGetU4(BYTE* array, UINT& pos)
{
    u4 value = 0;
    int i;
    for (i = 0; i < 4; i++) {
        value <<= 8;
        value += array[pos];
        pos++;
    }
    return value;
}

int ToolKit::memSetU4(BYTE* array, u4 value, UINT size, UINT& pos) {
  int result = -1;

  if((pos + sizeof(u4)) <= size) {
    u2 high, low;
    high = getHighWord(value);
    low = getLowWord(value);
    memSetU2(array, high, size, pos);
    memSetU2(array, low, size, pos);
	result = pos;
  }

  return result;
}

//-------------------------------------------------------------------------------

int ToolKit::memGetUtfString(BYTE* array, UINT& pos, u1*utfString, u2 strLength)
{
    assert(array != NULL);
    if(utfString != NULL) {
        memcpy(utfString, array+pos, strLength);
        utfString[strLength] = (u1)0;
    }
    pos = pos + strLength;
	return (int)0;
}

int ToolKit::memSetUtfString(BYTE* array, u1* utfString, u2 strLength, UINT size, UINT& pos) {
	int result = -1;
	if((pos + strLength) <= size) {
		memcpy(array + pos, utfString, strLength);
		pos = pos + strLength;
		result = pos;
	}
	return result;
}

//-------------------------------------------------------------------------------

int ToolKit::memGetUnicodeString(BYTE* array, UINT& pos, u2*unicodeString, u2 strLength)
{
    assert(array != NULL);
    if(unicodeString) {
        memcpy(unicodeString, array+pos, strLength*sizeof(u2));
        unicodeString[strLength] = (u2)0;
    }
    pos = pos + strLength*sizeof(u2);
	return (int)0;
}

int ToolKit::memSetUnicodeString(BYTE* array, u2* unicodeString, u2 strLength, UINT size, UINT& pos) {
	int result = -1;
	if((pos + strLength*sizeof(u2)) <= size) {
		memcpy(array + pos, unicodeString, strLength*sizeof(u2));
		pos = pos + strLength*sizeof(u2);
		result = pos;
	}
	return result;
}

//-------------------------------------------------------------------------------

int ToolKit::memGetU1Array(BYTE* array, UINT& pos, u1*u1Array, u4 u1ArrayLength)
{
    assert(array != NULL);
    if(u1Array) {
        memcpy(u1Array,array+pos,u1ArrayLength*sizeof(u1));
    }
    pos = pos + u1ArrayLength;
	return (int)0;
}


int ToolKit::memSetU1Array(BYTE* array, u1*u1Array, u4 u1ArrayLength, UINT size, UINT& pos) {
	int result = -1;
	if((pos + u1ArrayLength) <= size) {
		memcpy(array + pos, u1Array, u1ArrayLength);
		pos = pos + u1ArrayLength;
		result = pos;
	}
	return result;
}

IFormator* ToolKit::createConsoleFormator() {
	ConsoleFormator* ret = new ConsoleFormator();
	return (IFormator*)ret;
}


void ToolKit::destroyFormator(IFormator* formator) {
	assert(formator);
	delete formator;
}
