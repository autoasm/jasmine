// Class automatically generated by Dev-C++ New Class wizard

#ifndef JCLASS_H
#define JCLASS_H

#include "jtype.h"
#include "constant.h"
#include "jobject.h"
#include "fieldinfo.h"
#include "methodinfo.h"
#include "jclassintf.h"
#include "jbuffer.h"


// No description

/*! Constant pool element */ 
typedef Constant* PCONSTANT;

/*! Fields element */ 
typedef FieldInfo* PFIELDINFO;

/*! Methods element */
typedef MethodInfo* PMETHODINFO; 

/*! Attributes element */
typedef GenericAttribute* PATTRIBUTE;


/*!
	\mainpage JASMin 0.5 preview
	
	\note JASMin is a java deassembler. 

	Usage: jasmin classname

	\author Alex Dou (autoasm@yahoo.com)
*/


class JClass : public JClassInterface
{   
	public:
	    /*! Magic Number */
	    static const u4 Magic  = 0xCAFEBABE;
	
		/*! Constructors and Destructors */
		JClass();

		virtual ~JClass();
		
		/*! Set Magic Number of Class */
		void setMagic(u4 x); 
		/*! Get Magic Number of Class */
        virtual u4 getMagic(); 
		
        /*! Is Class file Valid ? */
        bool isValid(); 		
		
		/*! Set Minor Version */
		void setMinorVersion(u2 x); 
		/*! Get Minor Version */
		virtual u2 getMinorVersion(); 
		
		/*! Set Major Version */
		void setMajorVersion(u2 x);
		/*! Get Major Version */
		virtual u2 getMajorVersion(); 	
		
		/*! Set Constant Pool Count */
		void setConstPoolCount(u2 x); 
		/*! Get Constant Pool Count */
		virtual u2 getConstPoolCount(); 
		
		/*! Set Access Flag */
		void setAccessFlag(u2 x); 
		/*! Get Access Flag */
		virtual u2 getAccessFlag(); 
		
		virtual u2 getThisClass();
		void setThisClass(u2 x);
		
		virtual u2 getSuperClass();
		void setSuperClass(u2 x);
		
		/*! Get Interfaces Count */
		virtual u2 getInterfaceCount();
		/*! Set Interfaces Count */
		void setInterfaceCount(u2 x);
		
		/*! Get Fields Count */
		virtual u2 getFieldsCount();
		/*! Set Fields Count */
		void setFieldsCount(u2 x);
		
		/*! Initializing Constant Pool */ 
		void initConstantPool(UINT count);
		/*! Initializing Interfaces */ 
		void initInterfaces(u2 count);
		/*! Initializing Fields */ 
		void initFields(u2 count);
		/*! Initializing Methods */
		void initMethods(u2 count);
        /*! Initializing Attributes */
        void initAttributes(u2 count); 
		
		/*! Set element of constant Pool */ 
		void setConstant(Constant*constant,u2 pos);
		/*! Get element of constant Pool */
        virtual Constant* getConstant(u2 pos);
        
        /*! Get Interface buffer */
		inline u2* getInterfaces() { return interfaces;};
		/*! Get a Interface */
        virtual u2 getInterface(u2 pos);
        /*! Set a Interface */
        void setInterface(u2 intf, u2 pos);
		
		/*! Get Fields */
		virtual FieldInfo*getField(u2 pos);
		/*! Set Fields */
		void setField(FieldInfo*field,u2 pos);
		
		/*! Set Methods count */
		void setMethodsCount(u2 x);
		/*! Get Methods Count */
		virtual u2 getMethodsCount();
		
		/*! Get Method Infomation */
		virtual MethodInfo*getMethod(u2 pos);
		/*! Set Method Information */
		void setMethod(MethodInfo*method, u2 pos);
		
		/*! Get Attributes Count */
		virtual u2 getAttributesCount();
		/*! Set Attributes Count */
		void setAttributesCount(u2 _count);
		
		/*! Get Attribute */
		virtual GenericAttribute* getAttribute(u2 pos);
		/*! Set Attribute */
		virtual void setAttribute(GenericAttribute*attribute,u2 pos);
		
		void addConstant(Constant*_constant_);

		UINT serialize(JBuffer* buf);
		
	protected:

	private:
        /*! Magic Number */
		u4 magic;
		
		/*! Minor Version of complier */
		u2 minorVersion;
		/*! Major Version of compiler */
		u2 majorVersion;
 		/*! Constant pool counter */
		u2 constPoolCount; 		
		
		//! TODO: Insert constant_pool here
		PCONSTANT* constantPool;
		
		/*! Access Flags */
		u2 accessFlags;
		
		/*! This Class Index */
		u2 thisClass;
		
		/*! Super Class Index */
		u2 superClass;
		
		/*! Interface Counter */
		u2 interfacesCount;
		
		//TODO: Insert Interfaces here
		u2*interfaces;
		
		/*! Fields counter */
		u2 fieldsCount;
		
		//TODO: Insert Fields here
		PFIELDINFO* fields;
		
		/*! Methods Count */
		u2 methodsCount;
		
		//TODO: Insert Methods Here
		PMETHODINFO* methods;
		
		/*! Attributes Count */
		u2 attributesCount;
		
		u2 constantIndex;
		
		//TODO: Insert Attributes Here
		PATTRIBUTE* attributes;
		
};

/*!
    \class JClass
    Class JClass represents java class.
	Please see Java Virtual Machine Specification for more detail about java class file.
*/

#endif // JCLASS_H

