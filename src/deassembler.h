// Class automatically generated by Dev-C++ New Class wizard

#ifndef DEASSEMBLER_H
#define DEASSEMBLER_H

#include "jclass.h"
#include "iformator.h"


class Deassembler
{
	protected:
		JClass*javaClass;

		/*! formator for output */
		IFormator* output;

		/*! Handle methods in java class */
		u2 handleMethod(MethodInfo* _method);

		/*! Is this attribute a code attribute ? */
		bool isCodeAttribute(GenericAttribute* attribute);

		/*! Dump code from code attribute */
		bool dumpCode(GenericAttribute* attribute,u2*maxStack,u2*maxLocals,u4*codeLength,u1**codeBlock);

		/*! Output java instructions */
		int outPut(char* _className, char* _methodName, u1* _codes,u4 codeLength);

		/*! Get name of class that be deassembled */
		u1* getClassName();

		/*! Get Name of method */
		u1* getMethodName(MethodInfo* _method);

		/*! Handle instructions that without operand */
		int onNoOperand(u1 instruction);

		/*! Handle instructions that with one oprand */
		int onOneOperand(u1 instruction, u1*codes, u4 codeLength, UINT&pos);

		/*! Handle instructions that with two oprand */
		int onTwoOperand(u1 instruction, u1*codes, u4 codeLength, UINT&pos);

		/*! Handle instructions that with three oprand */
		int onThreeOperand(u1 instruction, u1*codes, u4 codeLength, UINT&pos);

		/*! Handle instructions that with four oprand */
		int onFourOperand(u1 instruction, u1*codes, u4 codeLength, UINT&pos);

	public:
		// class constructor
		Deassembler(JClass*_javaClass);

		// class destructor
		~Deassembler();

                void setFormator(IFormator* formator);

		/*! Deassemble the java class */
		u2 dump();
};


/*!
	\class Deassembler
	Class Deassembler is an essential class of JInsight.
	Class Deassembler deassembles java class and output formated information about the java class.
*/


#endif // DEASSEMBLER_H

